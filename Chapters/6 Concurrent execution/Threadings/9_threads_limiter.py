import time
from threading import Lock


class Throttle:
    """
    Алгоритм маркерной корзины (token bucket):
    Существует «Корзина» с заранее определенным количеством маркеров.
    • Каждый маркер соответствует одному разрешению на обработку одной единицы работы.
    • Каждый раз, когда рабочий поток запрашивает один или несколько маркеров
    (разрешений), алгоритм работает так:
        1. Проверить, сколько времени прошло с момента последнего заполнения корзины.
        2. Если прошло достаточно времени, заполнить корзину количеством маркеров, соответствующим разности во времени.
        3. Если количество хранимых маркеров больше либо равно запрошенному количеству, уменьшить количество хранимых
           маркеров до запрошенной величины и вернуть ее.
        4. Если количество хранимых маркеров меньше запрошенного, вернуть О.
    """

    def __init__(self, rate):
        self._consume_lock = Lock()
        self.rate = rate
        self.tokens = 0
        self.last = None


    def consume(self, amount=1):
        with self._consume_lock:
            now = time.time()

            # Отсчет времени инициализируется при первом запросе
            # маркера, чтобы предотвратить всплеск запросов
            if self.last is None:
                self.last = now

            elapsed = now - self.last

            # Проверяем, что прошедший квант времени
            # достаточно велик для добавления новых маркеров

            if elapsed * self.rate > 1:
                self.tokens += elapsed * self.rate
                self.last = now
            # Корзина никогда не должна переполняться
            self.tokens = min(self.rate, self.tokens)

            # Выдать маркеры, если они доступны
            if self.tokens >= amount:
                self.tokens -= amount
                return amount
            return 0